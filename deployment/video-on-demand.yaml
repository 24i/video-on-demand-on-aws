Description: '(SO0021) - Video On Demand workflow with AWS Step Functions, ElasticTranscoder, S3, CloudFront and DynamoDB'

Parameters:

  AdminEmail:
    Description: Email address for SNS notifications
    Type: String
    AllowedPattern: "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"

  Watermark:
    Description: enable Watermarking in ElasticTranscoder
    Type: String
    AllowedValues:
        - "Yes"
        - "No"

  WatermarkFile:
    Description: Specify the name of the watermark JPEG or PNG image file to be used, this will need to be uplaoaded to the root of the s3 source bucket once the stack is complete.
    Type: String
    Default: 'aws-logo.png'

  SendAnonymousData:
    Description: Anonymous Metrics Request
    Type: String
    Default: 'Yes'
    AllowedValues:
        - "Yes"
        - "No"

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
              Label:
                  default: "Workflow Configuration"
              Parameters:
                  - AdminEmail
                  - Watermark
                  - WatermarkFile
            -
              Label:
                  default: "Anonymous Metrics Request"
              Parameters:
                  - SendAnonymousData
        ParameterLabels:
          AdminEmail:
            default: "Administrator email address"
          WatermarkFile:
            default: "Watermark Image"
          SendAnonymousData:
              default: "Send Anonymous Usage Data"

Mappings:
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "video-on-demand/latest"

Resources:

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-custom-resource"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - iam:List*
                  - iam:PassRole
                Resource:
                  - !Join ["", ["arn:aws:iam::", Ref: "AWS::AccountId", ":role/*"]]
              -
                Effect: Allow
                Action:
                  - states:ListStateMachines
                  - states:CreateStateMachines
                Resource:
                  - !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              -
                Effect: Allow
                Action:
                  - elastictranscoder:CreatePipeline
                  - elastictranscoder:CreatePreset
                  - elastictranscoder:DeletePipeline
                  - elastictranscoder:DeletePreset
                  - elastictranscoder:ListPipelines
                  - elastictranscoder:ListPresets
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionConfiguration
                Resource:
                  - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]
              -
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - "arn:aws:s3:::*"
              -
                Effect: Allow
                Action:
                  - s3:Put*
                  - s3:Get*
                  - s3:PutBucketPolicy
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:PutBucketNotification
                Resource:
                  - !Join ["", ["arn:aws:s3:::", Ref: "Source", "/*" ]]
                  - !Join ["", ["arn:aws:s3:::", Ref: "Source" ]]
                  - !Join ["", ["arn:aws:s3:::", Ref: "HlsDest" ]]
              -
                Effect: Allow
                Action:
                  - sns:List*
                  - sns:Subscribe
                Resource:
                  - !Join ["", ["arn:aws:sns:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - states:*
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - cloudfront:CreateCloudFrontOriginAccessIdentity
                  - cloudfront:ListCloudFrontOriginAccessIdentities
                Resource: "*"

  EtsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - elastictranscoder.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticTranscoderRole

  StepFunctionsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - !Join ["", ["states.", Ref: "AWS::Region", ".amazonaws.com" ]]
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-ets-service-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]

  StepFunctionsExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-steps-execute"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - states:*
                Resource:
                  - !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:*" ]]
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource:
                  - !Join ["", ["arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/",Ref: "DynamoDB"]]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              -
                Effect: Allow
                Action:
                  - sns:List*
                Resource:
                  - "arn:aws:sns:::*"
              -
                Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref StepsPublish
                  - !Ref StepsErrors

  WorkflowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticTranscoderJobsSubmitter
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-worflow-lambda-role"
          PolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Action:
                  - s3:ListBucket
                Resource:
                  - "arn:aws:s3:::*"
              -
                Effect: Allow
                Action:
                  - s3:Put*
                  - s3:Get*
                Resource:
                  - !Join ["", ["arn:aws:s3:::", Ref: "Source", "/*" ]]
                  - !Join ["", ["arn:aws:s3:::", Ref: "Mp4Dest", "/*" ]]
              -
                Effect: Allow
                Action:
                  - sns:List*
                Resource:
                  - "arn:aws:sns:::*"
              -
                Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref StepsPublish
                  - !Ref StepsErrors
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource:
                  - !Join ["", ["arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/",Ref: "DynamoDB"]]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]

# Services
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: guid
        AttributeType: S
      KeySchema:
      - AttributeName: guid
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Ref AWS::StackName

  Source:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs
        LogFilePrefix: source-logs/

  Mp4Dest:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs
        LogFilePrefix: mp4-access/

  HlsDest:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs
        LogFilePrefix: hls-access/
      CorsConfiguration:
        CorsRules:
        - AllowedMethods: [GET]
          AllowedOrigins: ['*']

  Logs:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite

  EtsWarnings:
    Type: AWS::SNS::Topic

  EtsProcessing:
    Type: AWS::SNS::Topic

  EtsErrors:
    Type: AWS::SNS::Topic
    Properties:
     Subscription:
      -
        Endpoint: !Ref AdminEmail
        Protocol: email

  EtsComplete:
    Type: AWS::SNS::Topic

  StepsErrors:
    Type: AWS::SNS::Topic
    Properties:
     Subscription:
      -
        Endpoint: !Ref AdminEmail
        Protocol: email

  StepsPublish:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !Ref AdminEmail
          Protocol: email

  IngestAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepsErrors
      AlarmDescription: "Sns notification on stateMachine execution failure"
      AlarmName: !Sub "${AWS::StackName}-Ingest-alarm"
      ComparisonOperator:  GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref IngestWorkflow
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 300
      Statistic: Sum
      Threshold: 0.0
      EvaluationPeriods: '1'

  ProcessAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepsErrors
      AlarmDescription: "Sns notification on stateMachine execution failure"
      AlarmName: !Sub "${AWS::StackName}-process-alarm"
      ComparisonOperator:  GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref ProcessWorkflow
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 300
      Statistic: Sum
      Threshold: 0.0
      EvaluationPeriods: '1'

  PublishAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepsErrors
      AlarmDescription: "Sns notification on stateMachine execution failure"
      AlarmName: !Sub "${AWS::StackName}-publish-alarm"
      ComparisonOperator:  GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref PublishWorkflow
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 300
      Statistic: Sum
      Threshold: 0.0
      EvaluationPeriods: '1'

  LambdaS3Invoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IngestExecute.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  LambdaSnsEtsInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PublishExecute.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref EtsComplete

  CloudFront:
    DependsOn: CloudFrontIdentity
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt HlsDest.DomainName
            Id: vodS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !GetAtt CloudFrontIdentity.Identity]]
        Enabled: 'true'
        Logging:
          IncludeCookies: 'false'
          Bucket: !GetAtt Logs.DomainName
          Prefix: cloudfront-logs/
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: vodS3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
            Headers:
              - Origin
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

# Custom Resource
  IngestWorkflow:
    Type: Custom::StepFunctions
    Properties:
      ServiceToken: !GetAtt LambdaDeployStepFunctions.Arn
      Workflow: ingest
      Name: !Sub ${AWS::StackName}-Ingest
      SourceValidate: !GetAtt SourceValidate.Arn
      Mediainfo: !GetAtt Mediainfo.Arn
      IngestSns: !GetAtt IngestSns.Arn
      ProcessExecute: !GetAtt ProcessExecute.Arn
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn

  ProcessWorkflow:
    Type: Custom::StepFunctions
    Properties:
      ServiceToken: !GetAtt LambdaDeployStepFunctions.Arn
      Workflow: process
      Name: !Sub ${AWS::StackName}-Process
      Profiler: !GetAtt Profiler.Arn
      EncodeMp4: !GetAtt EncodeMp4.Arn
      EncodeHls: !GetAtt EncodeHls.Arn
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn

  PublishWorkflow:
    Type: Custom::StepFunctions
    Properties:
      ServiceToken: !GetAtt LambdaDeployStepFunctions.Arn
      Workflow: publish
      Name: !Sub ${AWS::StackName}-Publish
      OutputValidate: !GetAtt OutputValidate.Arn
      Mediainfo: !GetAtt Mediainfo.Arn
      Mp4Metadata: !GetAtt Mp4Metadata.Arn
      HlsEndpoint: !GetAtt HlsEndpoint.Arn
      PublishSns: !GetAtt PublishSns.Arn
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn

  EtsMp4:
    Type: Custom::ElasticTranscoder
    Properties:
      ServiceToken: !GetAtt LambdaDeployEts.Arn
      Name: !Sub ${AWS::StackName}-Mp4
      Complete: !Ref EtsComplete
      Error: !Ref EtsErrors
      Progress: !Ref EtsProcessing
      Warning: !Ref EtsWarnings
      Source: !Ref Source
      Dest: !Ref Mp4Dest
      Role: !GetAtt EtsServiceRole.Arn

  EtsHls:
    Type: Custom::ElasticTranscoder
    Properties:
      ServiceToken: !GetAtt LambdaDeployEts.Arn
      Name: !Sub ${AWS::StackName}-HLS
      Complete: !Ref EtsComplete
      Error: !Ref EtsErrors
      Progress: !Ref EtsProcessing
      Warning: !Ref EtsWarnings
      Source: !Ref Source
      Dest: !Ref HlsDest
      Role: !GetAtt EtsServiceRole.Arn

  EtsPresets:
    Type: Custom::ElasticTranscoderPresets
    Properties:
      ServiceToken: !GetAtt LambdaDeployEtsPresets.Arn
      Source: !Ref Source

  CloudFrontIdentity:
    Type: Custom::CloudFront
    Properties:
      ServiceToken: !GetAtt LambdaCloudfrontIdentity.Arn
      Bucket: !Ref HlsDest

  S3Config:
    DependsOn: CloudFront
    Type: Custom::S3
    Properties:
      ServiceToken: !GetAtt LambdaS3Config.Arn
      Source: !Ref Source
      IngestArn: !GetAtt IngestExecute.Arn
      Watermark: !Ref Watermark
      WatermarkFile: !Ref WatermarkFile

  SnsConfig:
    DependsOn: CloudFront
    Type: Custom::SNS
    Properties:
      ServiceToken: !GetAtt LambdaSnsConfig.Arn
      EtsComplete: !Ref EtsComplete
      PublishArn: !GetAtt PublishExecute.Arn

#Custom Resource Lambda Functions
  LambdaDeployStepFunctions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deploy-stepfunctions
      Description: Custom Resource to deploy Step Functions
      Handler: step-functions.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "custom-resources.zip"]]
      Runtime: nodejs6.10
      Timeout: 120

  LambdaDeployEts:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deploy-ets-pipeline
      Description: Custom Resource to deploy Elastic Transcoder Pipelines
      Handler: ets-pipeline.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "custom-resources.zip"]]
      Runtime: nodejs6.10
      Timeout: 120

  LambdaDeployEtsPresets:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deploy-ets-presets
      Description: Custom Resource to create ETS presets for HLS and MP4
      Handler: ets-presets.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "custom-resources.zip"]]
      Runtime: nodejs6.10
      Timeout: 120

  LambdaCloudfrontIdentity:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deploy-cloudfront-identity
      Description: Custom Resource to create cloudfront origin access identity
      Handler: cloudfront-identity.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "custom-resources.zip"]]
      Runtime: nodejs6.10
      Timeout: 120

  LambdaS3Config:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deploy-s3-config
      Description: Custom Resource to create an s3 event trigger for ingest execute lambda function
      Handler: s3-config.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "custom-resources.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120

  LambdaSnsConfig:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deploy-sns-config
      Description: Custom Resource to create an sns trigger for publish
      Handler: sns-config.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "custom-resources.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120

# workflow triggers
  IngestExecute:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ingest-execute"
      Description: Triggered by s3 put object event, executes Publish Step Functions
      Handler: ingest-execute.handler
      Role: !GetAtt StepFunctionsExecuteRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          IngestWorkflow: !Ref IngestWorkflow
          DynamoDB: !Ref DynamoDB
          StepsPublish: !Ref StepsPublish

  ProcessExecute:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-process-execute"
      Description: Executes the processing workflow
      Handler: ingest-process-execute.handler
      Role: !GetAtt StepFunctionsExecuteRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime: nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          ProcessWorkflow: !Ref ProcessWorkflow
          DynamoDB: !Ref DynamoDB
          StepsErrors: !Ref StepsErrors

  PublishExecute:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-publish-execute
      Description: Subscribed to ETS complete SNS, executes Publish Step Functions
      Handler: publish-execute.handler
      Role: !GetAtt StepFunctionsExecuteRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          PublishWorkflow: !Ref PublishWorkflow
          EtsMp4: !GetAtt EtsMp4.PipelineId
          EtsHls: !GetAtt EtsHls.PipelineId

# Workflow Lambda Functions
  SourceValidate:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ingest-source-validate"
      Description: Creates Dynamo entry for source video, bucket and GUID
      Handler: ingest-source-validate.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime: nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          DynamoDB: !Ref DynamoDB
          Mp4Dest: !Ref Mp4Dest
          HlsDest: !Ref HlsDest

  Mediainfo:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-mediainfo"
      Description: Runs mediainfo on a pre-signed s3 URL for source and mp4 output files
      Handler: index.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "mediainfo.zip"]]
      Runtime: nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          DynamoDB: !Ref DynamoDB
          Mp4Dest: !Ref Mp4Dest

  IngestSns:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ingest-sns
      Description: Updates DynamoDB and sends a process complete sns notification
      Handler: ingest-sns.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          DynamoDB: !Ref DynamoDB
          StepsPublish: !Ref StepsPublish

  Profiler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-process-profiler
      Description: Sets an Encode Profile based on mediainfo output
      Handler: process-profiler.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime: nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          DynamoDB: !Ref DynamoDB

  EncodeMp4:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-process-encode-mp4
      Description: Creates a MP4 ETS encode job
      Handler: process-encode-mp4.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          Watermark: !Ref Watermark
          WatermarkFile: !Ref WatermarkFile
          DynamoDB: !Ref DynamoDB
          EtsMp4: !Ref EtsMp4
          Mp4_1080p: !GetAtt EtsPresets.Mp4_1080p
          Mp4_720p: !GetAtt EtsPresets.Mp4_720p
          Mp4_540p: !GetAtt EtsPresets.Mp4_540p
          Mp4_432p: !GetAtt EtsPresets.Mp4_432p
          Mp4_360p: !GetAtt EtsPresets.Mp4_360p
          Mp4_270p: !GetAtt EtsPresets.Mp4_270p
          Mp4_234p: !GetAtt EtsPresets.Mp4_234p


  EncodeHls:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-process-encode-hls
      Description: Creates a HLS ETS encode
      Handler: process-encode-hls.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          Watermark: !Ref Watermark
          WatermarkFile: !Ref WatermarkFile
          DynamoDB: !Ref DynamoDB
          EtsHls: !Ref EtsHls
          Hls_1080p: !GetAtt EtsPresets.Hls_1080p
          Hls_720p: !GetAtt EtsPresets.Hls_720p
          Hls_540p: !GetAtt EtsPresets.Hls_540p
          Hls_432p: !GetAtt EtsPresets.Hls_432p
          Hls_360p: !GetAtt EtsPresets.Hls_360p
          Hls_270p: !GetAtt EtsPresets.Hls_270p
          Hls_234p: !GetAtt EtsPresets.Hls_234p

  OutputValidate:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-publish-output-validate
      Description: Updates DynamoDB with ETS outputs
      Handler: publish-output-validate.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          DynamoDB: !Ref DynamoDB

  HlsEndpoint:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-publish-hls-endpoint
      Description: Generates the CloudFront URL for the HLS output
      Handler: publish-hls-endpoint.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          DynamoDB: !Ref DynamoDB
          Cdn: !GetAtt CloudFront.DomainName

  Mp4Metadata:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-publish-mp4-metadata
      Description: Generates a json metadata file for the  mp4 output
      Handler: publish-mp4-metadata.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          DynamoDB: !Ref DynamoDB
          Mp4Dest: !Ref Mp4Dest

  PublishSns:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-publish-sns
      Description: Updates DynamoDB and sends a publish complete sns notification
      Handler: publish-sns.handler
      Role: !GetAtt WorkflowRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "workflow.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120
      Environment:
        Variables:
          DynamoDB: !Ref DynamoDB
          StepsPublish: !Ref StepsPublish
          UUID: !GetAtt Uuid.UUID
          anonymousData: !Ref SendAnonymousData

# Anonomus Data
  LambdaMetricsHelper:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-send-anonymous-data"
      Description: If enabled, a function to Send anonymous data back to AWS.
      Handler: index.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "metrics.zip"]]
      Runtime:  nodejs6.10
      Timeout: 120

  Uuid:
    Type: "Custom::LoadLambda"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "LambdaMetricsHelper"
          - "Arn"
      customAction: "createUuid"

  AnonymousMetric:
    Type: "Custom::LoadLambda"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "LambdaMetricsHelper"
          - "Arn"
      solutionId: "SO0021"
      UUID: !GetAtt Uuid.UUID
      version: "1"
      anonymousData: !Ref SendAnonymousData
      customAction: "sendMetric"

Outputs:
  DynamoDB:
    Description: DynamoDB Table
    Value: !Ref DynamoDB

  Source:
    Description: Source Bucket
    Value: !Ref Source

  Mp4Dest:
    Description: MP4 Destination Bucket
    Value: !Ref Mp4Dest

  HlsDest:
    Description: HLS Destination Bucket
    Value: !Ref HlsDest

  Cdn:
    Description: CloudFront Domain Name
    Value: !GetAtt CloudFront.DomainName

  UUID:
    Description: AnonymousMetric UUID
    Value: !GetAtt Uuid.UUID
